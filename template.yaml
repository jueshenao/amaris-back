AWSTemplateFormatVersion: '2010-09-09'
Description: Backend deployment for Fund Management System

Resources:
  # DynamoDB Tables
  ClientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: clients
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  FundsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: funds
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: transactions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Function
  FundManagementLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FundManagementLambda
      Handler: app.lambda_handler
      Runtime: python3.9
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Environment:
        Variables:
          CLIENTS_TABLE: !Ref ClientsTable
          FUNDS_TABLE: !Ref FundsTable
          TRANSACTIONS_TABLE: !Ref TransactionsTable
      Role: !GetAtt LambdaExecutionRole.Arn

  # API Gateway
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FundManagementApi

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: api
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FundManagementLambda.Arn}/invocations
          - { "AWS::Region": !Ref "AWS::Region" }
  
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: dev
    DependsOn:
      - ApiGatewayMethodPost

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource: 
                  - !GetAtt ClientsTable.Arn
                  - !GetAtt FundsTable.Arn
                  - !GetAtt TransactionsTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*